% check_covariance_balance_AIF_three_components.m
function logical_inds = ... 
    check_covariance_balance_AIF_three_components(stats, params, tolerance)


% compute numerical lifetimes
tau_x = stats.X_avg./(params.theta.*stats.Z_avg + params.lambda.*stats.Complex_avg);
tau_y = stats.Y_avg./(params.mu + params.lambda.*stats.Complex_avg);
tau_z = 1./params.beta_z;
tau_pr = 1./params.beta_z;
tau_com = 1./(params.lambda + params.gamma);

% compute "efficiency" parameters
% Ei = 1 <--> no subunit deg. for i = x,y
Ex = params.C.*stats.XY_avg./(params.C.*stats.XY_avg + ...
    params.beta_x.*stats.X_avg);
Ey = params.C.*stats.XY_avg./(params.C.*stats.XY_avg + ...
    params.beta_y.*stats.Y_avg);
Ecom = params.lambda./(params.lambda + params.gamma);

% compute anolgous params for the relative contribution of different
% birth sources at stationarity
% Fx=Fy=1 <--> no complex dissociation
Fx = params.theta.*stats.Z_avg./(params.theta.*stats.Z_avg +...
    params.lambda.*stats.Complex_avg);
Fy = params.mu./(params.mu + params.lambda.*stats.Complex_avg);

% non-zero co-step sizes
s_xy = 0.5.*((1-Fx) + Ex); 
s_yx = 0.5.*((1-Fy) + Ey); 
s_xcom = -0.5.*((1-Fx) + Ex);
s_ycom = -0.5.*((1-Fy) + Ey);
s_comx = -0.5.*(1 + Ecom);
s_comy = -0.5.*(1 + Ecom);

% check covariance balance for each pair of components
LHS_XX = (params.C.*stats.cov_XY_X + params.beta_x.*stats.X_var)./...
    ((params.C.*stats.XY_avg + params.beta_x.*stats.X_avg).*stats.X_avg);
RHS_XX = (params.theta.*stats.cov_X_Z + params.lambda.*stats.cov_Complex_X)./...
    ((params.C.*stats.XY_avg + params.beta_x.*stats.X_avg).*stats.X_avg) ...
    + (1./stats.X_avg);

mean_XX = abs(mean([LHS_XX,RHS_XX],2));
err_XX = abs(LHS_XX - RHS_XX)./mean_XX;
inds_XX = err_XX <= tolerance;

LHS_YY = (params.C.*stats.cov_XY_Y + params.beta_y.*stats.Y_var)./...
    ((params.C.*stats.XY_avg + params.beta_y.*stats.Y_avg).*stats.Y_avg);
RHS_YY = (params.lambda.*stats.cov_Complex_Y)./...
    ((params.C.*stats.XY_avg + params.beta_y.*stats.Y_avg).*stats.Y_avg) ...
    + (1./stats.Y_avg);
mean_YY = abs(mean([LHS_YY,RHS_YY],2));
err_YY = abs(LHS_YY - RHS_YY)./mean_YY;
inds_YY = err_YY <= tolerance;

LHS_ZZ = (params.beta_z.*stats.Z_var)./...
    ((params.alpha +params.k.*stats.Y_avg + stats.HFy_avg + stats.HFx_avg).*stats.Z_avg);
RHS_ZZ = (stats.cov_HFx_Z + stats.cov_HFy_Z + params.k.*stats.cov_Y_Z)./...
    ((params.alpha +params.k.*stats.Y_avg + stats.HFy_avg + stats.HFx_avg).*stats.Z_avg)...
    + (1./stats.Z_avg);
mean_ZZ = abs(mean([LHS_ZZ,RHS_ZZ],2));
err_ZZ = abs(LHS_ZZ - RHS_ZZ)./mean_ZZ;
inds_ZZ = err_ZZ <= tolerance;

if params.passive_reporter(1) == 1.0
    LHS_PRPR = (params.beta_z.*stats.PR_var)./...
        ((params.beta_z.*stats.PR_avg).*stats.PR_avg);
    RHS_PRPR = (stats.cov_HFx_PR + stats.cov_HFy_PR + params.k.*stats.cov_PR_Y)./...
        ((params.beta_z.*stats.PR_avg).*stats.PR_avg)...
        + (1./stats.PR_avg);
else
    LHS_PRPR = ones(size(params.gamma));
    RHS_PRPR = ones(size(params.gamma));
end
mean_PRPR = abs(mean([LHS_PRPR,RHS_PRPR],2));
err_PRPR = abs(LHS_PRPR - RHS_PRPR)./mean_PRPR;
inds_PRPR = err_PRPR <= tolerance;

if (params.lambda(1) > 0 || params.gamma(1) > 0)
    LHS_ComCom = ((params.lambda + params.gamma).*stats.Complex_var)./...
        (((params.lambda + params.gamma).*stats.Complex_avg).*stats.Complex_avg);
    RHS_ComCom = (params.C.*stats.cov_XY_Complex)./...
        (((params.lambda + params.gamma).*stats.Complex_avg).*stats.Complex_avg)...
        + (1./stats.Complex_avg);
else
    LHS_ComCom = ones(size(params.gamma));
    RHS_ComCom = ones(size(params.gamma));
end
mean_ComCom = abs(mean([LHS_ComCom,RHS_ComCom],2));
err_ComCom = abs(LHS_ComCom - RHS_ComCom)./mean_ComCom;
inds_ComCom = err_ComCom <= tolerance;

LHS_XY = (1./tau_y).*(params.C.*stats.cov_XY_X + params.beta_y.*stats.cov_X_Y)./...
    ((params.C.*stats.XY_avg + params.beta_y.*stats.Y_avg).*stats.X_avg) + ...
    (1./tau_x).*(params.C.*stats.cov_XY_Y + params.beta_x.*stats.cov_X_Y)./...
    ((params.C.*stats.XY_avg + params.beta_x.*stats.X_avg).*stats.Y_avg);
RHS_XY = (1./tau_y).*(params.lambda.*stats.cov_Complex_X)./...
    ((params.C.*stats.XY_avg + params.beta_y.*stats.Y_avg).*stats.X_avg) + ...
     (1./tau_x).*(params.theta.*stats.cov_Y_Z + params.lambda.*stats.cov_Complex_Y)./...
    ((params.C.*stats.XY_avg + params.beta_x.*stats.X_avg).*stats.Y_avg) + ...
	(s_xy./(tau_x.*stats.Y_avg)) + (s_yx./(tau_y.*stats.X_avg));
mean_XY = abs(mean([LHS_XY,RHS_XY],2));
err_XY= abs(LHS_XY - RHS_XY)./mean_XY;
inds_XY = err_XY <= tolerance;

LHS_XZ = (1./tau_z).*(params.beta_z.*stats.cov_X_Z)./...
    ((params.alpha +params.k.*stats.Y_avg + stats.HFy_avg + stats.HFx_avg).*stats.X_avg) + ...
    (1./tau_x).*(params.C.*stats.cov_XY_Z + params.beta_x.*stats.cov_X_Z)./...
    ((params.C.*stats.XY_avg + params.beta_x.*stats.X_avg).*stats.Z_avg);
RHS_XZ = (1./tau_z).*(stats.cov_HFx_X + stats.cov_HFy_X + params.k.*stats.cov_X_Y)./...
    ((params.alpha +params.k.*stats.Y_avg + stats.HFy_avg + stats.HFx_avg).*stats.X_avg) + ...
    (1./tau_x).*(params.theta.*stats.Z_var + params.lambda.*stats.cov_Complex_Z)./...
    ((params.C.*stats.XY_avg + params.beta_x.*stats.X_avg).*stats.Z_avg);
mean_XZ = abs(mean([LHS_XZ,RHS_XZ],2));
err_XZ= abs(LHS_XZ - RHS_XZ)./mean_XZ;
inds_XZ = err_XZ <= tolerance;

if params.passive_reporter(1) == 1.0
    LHS_XPR = (1./tau_pr).*(params.beta_z.*stats.cov_PR_X)./...
        ((params.alpha +params.k.*stats.Y_avg + stats.HFy_avg + stats.HFx_avg).*stats.X_avg) + ...
        (1./tau_x).*(params.C.*stats.cov_XY_PR + params.beta_x.*stats.cov_PR_X)./...
        ((params.C.*stats.XY_avg + params.beta_x.*stats.X_avg).*stats.PR_avg);
    RHS_XPR = (1./tau_pr).*(stats.cov_HFx_X + stats.cov_HFy_X + params.k.*stats.cov_X_Y)./...
        ((params.alpha +params.k.*stats.Y_avg + stats.HFy_avg + stats.HFx_avg).*stats.X_avg) + ...
        (1./tau_x).*(params.theta.*stats.cov_PR_Z + params.lambda.*stats.cov_PR_Complex)./...
        ((params.C.*stats.XY_avg + params.beta_x.*stats.X_avg).*stats.PR_avg);
else
   RHS_XPR = ones(size(params.gamma));
   LHS_XPR = ones(size(params.gamma));
end
mean_XPR = abs(mean([LHS_XPR,RHS_XPR],2));
err_XPR= abs(LHS_XPR - RHS_XPR)./mean_XPR;
inds_XPR = err_XPR <= tolerance;

if (params.lambda(1) > 0 || params.gamma(1) > 0)
    LHS_Xcom = (1./tau_com).*((params.lambda + params.gamma).*stats.cov_Complex_X)./...
        (((params.lambda + params.gamma).*stats.Complex_avg).*stats.X_avg) + ...
        (1./tau_x).*(params.C.*stats.cov_XY_Complex + params.beta_x.*stats.cov_Complex_X)./...
        ((params.C.*stats.XY_avg + params.beta_x.*stats.X_avg).*stats.Complex_avg);
    RHS_Xcom = (1./tau_com).*(params.C.*stats.cov_XY_X)./...
        (((params.lambda + params.gamma).*stats.Complex_avg).*stats.X_avg) + ...
        (1./tau_x).*(params.theta.*stats.cov_Complex_Z + params.lambda.*stats.Complex_var)./...
        ((params.C.*stats.XY_avg + params.beta_x.*stats.X_avg).*stats.Complex_avg) + ...
        (s_xcom./(tau_x.*stats.Complex_avg)) + (s_comx./(tau_com.*stats.X_avg));
else
   LHS_Xcom = ones(size(params.gamma));
   RHS_Xcom = ones(size(params.gamma));
end
mean_Xcom = abs(mean([LHS_Xcom,RHS_Xcom],2));
err_Xcom = abs(LHS_Xcom - RHS_Xcom)./mean_Xcom;
inds_Xcom = err_Xcom <= tolerance;

LHS_YZ = (1./tau_z).*(params.beta_z.*stats.cov_Y_Z)./...
    ((params.alpha +params.k.*stats.Y_avg + stats.HFy_avg + stats.HFx_avg).*stats.Y_avg) + ...
    (1./tau_y).*(params.C.*stats.cov_XY_Z + params.beta_y.*stats.cov_Y_Z)./...
    ((params.C.*stats.XY_avg + params.beta_y.*stats.Y_avg).*stats.Z_avg);
RHS_YZ = (1./tau_z).*(stats.cov_HFx_Y + stats.cov_HFy_Y + params.k.*stats.Y_var)./...
    ((params.alpha +params.k.*stats.Y_avg + stats.HFy_avg + stats.HFx_avg).*stats.Y_avg) + ...
    (1./tau_y).*(params.lambda.*stats.cov_Complex_Z)./...
    ((params.C.*stats.XY_avg + params.beta_y.*stats.Y_avg).*stats.Z_avg);
mean_YZ = abs(mean([LHS_YZ,RHS_YZ],2));
err_YZ= abs(LHS_YZ - RHS_YZ)./mean_YZ;
inds_YZ = err_YZ <= tolerance;

if params.passive_reporter(1) == 1.0
    LHS_YPR = (1./tau_pr).*(params.beta_z.*stats.cov_PR_Y)./...
        ((params.alpha +params.k.*stats.Y_avg + stats.HFy_avg + stats.HFx_avg).*stats.Y_avg) + ...
        (1./tau_y).*(params.C.*stats.cov_XY_PR + params.beta_y.*stats.cov_PR_Y)./...
        ((params.C.*stats.XY_avg + params.beta_y.*stats.Y_avg).*stats.PR_avg);
    RHS_YPR = (1./tau_pr).*(stats.cov_HFx_Y + stats.cov_HFy_Y + params.k.*stats.Y_var)./...
        ((params.alpha +params.k.*stats.Y_avg + stats.HFy_avg + stats.HFx_avg).*stats.Y_avg) + ...
        (1./tau_y).*(params.lambda.*stats.cov_PR_Complex)./...
        ((params.C.*stats.XY_avg + params.beta_y.*stats.Y_avg).*stats.PR_avg);
else
   LHS_YPR = ones(size(params.gamma));
   RHS_YPR = ones(size(params.gamma));
end
mean_YPR = abs(mean([LHS_YPR,RHS_YPR],2));
err_YPR= abs(LHS_YPR - RHS_YPR)./mean_YPR;
inds_YPR = err_YPR <= tolerance;

if (params.lambda(1) > 0 || params.gamma(1) > 0)
    LHS_Ycom = (1./tau_com).*((params.lambda + params.gamma).*stats.cov_Complex_Y)./...
        (((params.lambda + params.gamma).*stats.Complex_avg).*stats.Y_avg) + ...
        (1./tau_y).*(params.C.*stats.cov_XY_Complex + params.beta_y.*stats.cov_Complex_Y)./...
        ((params.C.*stats.XY_avg + params.beta_y.*stats.Y_avg).*stats.Complex_avg) - ...
        ((s_ycom./(tau_y.*stats.Complex_avg)) + (s_comy./(tau_com.*stats.Y_avg)));
    RHS_Ycom = (1./tau_com).*(params.C.*stats.cov_XY_Y)./...
        (((params.lambda + params.gamma).*stats.Complex_avg).*stats.Y_avg) + ...
        (1./tau_y).*(params.lambda.*stats.Complex_var)./...
        ((params.C.*stats.XY_avg + params.beta_y.*stats.Y_avg).*stats.Complex_avg);
else
    LHS_Ycom = ones(size(params.gamma));
    RHS_Ycom = ones(size(params.gamma));
end
mean_Ycom = abs(mean([LHS_Ycom,RHS_Ycom],2));
err_Ycom = abs(LHS_Ycom - RHS_Ycom)./mean_Ycom;
inds_Ycom = err_Ycom <= tolerance;

if params.passive_reporter(1) == 1.0
    LHS_ZPR = (1./tau_pr).*(params.beta_z.*stats.cov_PR_Z)./...
        ((params.alpha +params.k.*stats.Y_avg + stats.HFy_avg + stats.HFx_avg).*stats.Z_avg) + ...
        (1./tau_z).*(params.beta_z.*stats.cov_PR_Z)./...
        ((params.alpha +params.k.*stats.Y_avg + stats.HFy_avg + stats.HFx_avg).*stats.PR_avg);
    RHS_ZPR = (1./tau_pr).*(stats.cov_HFx_Z + stats.cov_HFy_Z + params.k.*stats.cov_Y_Z)./...
        ((params.alpha +params.k.*stats.Y_avg + stats.HFy_avg + stats.HFx_avg).*stats.Z_avg) + ...
        (1./tau_z).*(stats.cov_HFx_PR + stats.cov_HFy_PR + params.k.*stats.cov_PR_Y)./...
        ((params.alpha +params.k.*stats.Y_avg + stats.HFy_avg + stats.HFx_avg).*stats.PR_avg);
else
   LHS_ZPR = ones(size(params.gamma));
   RHS_ZPR = ones(size(params.gamma));
end
mean_ZPR = abs(mean([LHS_YPR,RHS_YPR],2));
err_ZPR= abs(LHS_ZPR - RHS_ZPR)./mean_ZPR;
inds_ZPR = err_ZPR <= tolerance;

if (params.lambda(1) > 0 || params.gamma(1) > 0)
LHS_Zcom = (1./tau_com).*((params.lambda + params.gamma).*stats.cov_Complex_Z)./...
    (((params.lambda + params.gamma).*stats.Complex_avg).*stats.Z_avg) + ...
    (1./tau_z).*(params.beta_z.*stats.cov_Complex_Z)./...
    ((params.alpha +params.k.*stats.Y_avg + stats.HFy_avg + stats.HFx_avg).*stats.Complex_avg);
RHS_Zcom = (1./tau_com).*(params.C.*stats.cov_XY_Z)./...
    (((params.lambda + params.gamma).*stats.Complex_avg).*stats.Z_avg) + ...
    (1./tau_z).*(stats.cov_HFx_Complex + stats.cov_HFy_Complex + params.k.*stats.cov_Complex_Y)./...
    ((params.alpha +params.k.*stats.Y_avg + stats.HFy_avg + stats.HFx_avg).*stats.Complex_avg);
else
   LHS_Zcom = ones(size(params.gamma));
   RHS_Zcom = ones(size(params.gamma)); 
end
mean_Zcom = abs(mean([LHS_Zcom,RHS_Zcom],2));
err_Zcom = abs(LHS_Zcom - RHS_Zcom)./mean_Zcom;
inds_Zcom = err_Zcom <= tolerance;

if (params.passive_reporter(1) == 1.0 && (params.lambda(1) > 0 || params.gamma(1) > 0))
    LHS_PRcom = (1./tau_com).*((params.lambda + params.gamma).*stats.cov_PR_Complex)./...
        (((params.lambda + params.gamma).*stats.Complex_avg).*stats.PR_avg) + ...
        (1./tau_pr).*(params.beta_z.*stats.cov_PR_Complex)./...
        ((params.alpha +params.k.*stats.Y_avg + stats.HFy_avg + stats.HFx_avg).*stats.Complex_avg);
    RHS_PRcom = (1./tau_com).*(params.C.*stats.cov_XY_PR)./...
        (((params.lambda + params.gamma).*stats.Complex_avg).*stats.PR_avg) + ...
        (1./tau_pr).*(stats.cov_HFx_Complex + stats.cov_HFy_Complex + params.k.*stats.cov_Complex_Y)./...
        ((params.alpha +params.k.*stats.Y_avg + stats.HFy_avg + stats.HFx_avg).*stats.Complex_avg);
else
   LHS_PRcom = ones(size(params.gamma));
   RHS_PRcom = ones(size(params.gamma));
end
mean_PRcom = abs(mean([LHS_PRcom,RHS_PRcom],2));
err_PRcom = abs(LHS_PRcom - RHS_PRcom)./mean_PRcom;
inds_PRcom = err_PRcom <= tolerance;

logical_inds = inds_XX & inds_YY & inds_ZZ & inds_PRPR & inds_ComCom ...
    & inds_XY & inds_XZ & inds_XPR & inds_Xcom & inds_YZ & inds_YPR ... 
    & inds_Ycom & inds_ZPR & inds_Zcom & inds_PRcom;
end

